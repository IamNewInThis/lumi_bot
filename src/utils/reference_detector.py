# src/utils/reference_detector.py
import json
from typing import List, Dict, Any, Optional
from ..rag.utils import get_rag_context_with_sources
from .source_cache import source_cache

class ReferenceDetector:
    """
    Detector especializado para consultas sobre referencias de las respuestas que da Lumi.
    Busca en el RAG registros que contengan metadata 'ref: true' para obtener fuentes espec√≠ficas.
    """
    
    REFERENCE_KEYWORDS = {
        "fuentes", "referencias", "bibliograf√≠a", "origen de la informaci√≥n", 
        "de d√≥nde sacaste", "de donde sacaste", "d√≥nde obtuviste", "donde obtuviste",
        "qu√© fuentes", "que fuentes", "basado en qu√©", "basado en que",
        "seg√∫n qu√© autor", "segun que autor", "qu√© estudios", "que estudios", 
        "investigaciones", "papers", "art√≠culos", "articulos", "libros", 
        "evidencia cient√≠fica", "evidencia cientifica", "respaldo cient√≠fico", "respaldo cientifico",
        "autores", "expertos", "especialistas", "pedagogos", "m√©dicos", "medicos",
        "neurocient√≠ficos", "neurocientificos", "investigadores", 
        "d√≥nde le√≠ste", "donde leiste", "en qu√© te basas", "en que te basas",
        "esa informacion", "esa informaci√≥n", "esta informacion", "esta informaci√≥n"
    }
    
    @staticmethod
    def detect_reference_query(message: str) -> bool:
        """
        Detecta si el usuario est√° preguntando por referencias o fuentes.
        """
        message_lower = message.lower()
        detected_keywords = [kw for kw in ReferenceDetector.REFERENCE_KEYWORDS if kw in message_lower]
        
        if detected_keywords:
            print(f"üîç [REFERENCIAS] Keywords detectadas: {detected_keywords}")
            return True
        
        return False
    
    @staticmethod
    async def get_reference_chunks(query: str, limit: int = 10) -> List[Dict[str, Any]]:
        """
        Obtiene chunks espec√≠ficos que contienen referencias (ref: true).
        """
        try:
            # Hacer b√∫squeda RAG especial para referencias
            context, reference_chunks = await get_rag_context_with_sources(
                query, 
                search_id="references_query"
            )
            
            print(f"üìö [REFERENCIAS] B√∫squeda RAG completada para: {query}")
            print(f"üìö [REFERENCIAS] Encontrados {len(reference_chunks)} chunks con referencias")
            
            # Limitar la cantidad de chunks si es necesario
            if len(reference_chunks) > limit:
                reference_chunks = reference_chunks[:limit]
            
            return reference_chunks
            
        except Exception as e:
            print(f"‚ùå Error obteniendo chunks de referencias: {e}")
            return []
    
    @staticmethod
    def format_references_response(reference_chunks: List[Dict[str, Any]]) -> str:
        """
        Formatea la respuesta con las referencias encontradas.
        """
        if not reference_chunks:
            return """
üìö **Sobre las fuentes de informaci√≥n**

Mi conocimiento se basa en una amplia base de datos que incluye:

‚Ä¢ **Textos de referencia pedag√≥gica**: Investigaciones sobre desarrollo infantil y pedagog√≠as respetuosas
‚Ä¢ **Investigaciones neurocient√≠ficas**: Estudios sobre desarrollo cerebral y emocional en la infancia
‚Ä¢ **Literatura m√©dica**: Pediatr√≠a del desarrollo, lactancia y nutrici√≥n infantil
‚Ä¢ **Metodolog√≠as educativas**: Enfoques pedag√≥gicos centrados en el ni√±o y el desarrollo aut√≥nomo

Para obtener referencias espec√≠ficas sobre un tema particular, puedes preguntarme sobre un √°rea concreta (por ejemplo: "¬øqu√© referencias tienes sobre sue√±o infantil?" o "¬øen qu√© te basas para hablar de destete?").
"""
        
        # Agrupar por fuente/categor√≠a
        sources_by_category = {}
        for chunk in reference_chunks:
            category = chunk.get("category", "General")
            source = chunk.get("source", "Documento desconocido")
            
            if category not in sources_by_category:
                sources_by_category[category] = {}
            
            if source not in sources_by_category[category]:
                sources_by_category[category][source] = []
            
            sources_by_category[category][source].append(chunk)
        
        # Formatear respuesta
        response = "üìö **Referencias y fuentes consultadas**\n\n"
        
        for category, sources in sources_by_category.items():
            response += f"### {category}\n\n"
            
            for source, chunks in sources.items():
                response += f"**üìÑ {source.replace('_ref.pdf', '').replace('_', ' ').title()}**\n"
                
                # Mostrar contenido del primer chunk (suele ser el resumen de referencias)
                if chunks:
                    content = chunks[0].get("content", "")
                    if content:
                        # Truncar si es muy largo
                        if len(content) > 500:
                            content = content[:500] + "..."
                        response += f"{content}\n\n"
                
                response += "---\n\n"
        
        response += """
üí° **Nota**: Estas son las fuentes principales para el tema que consultaste. Si necesitas referencias sobre otros temas espec√≠ficos, no dudes en preguntarme.
"""
        
        return response
    
    @staticmethod
    async def handle_reference_query(message: str, user_id: str) -> str:
        """
        Maneja una consulta espec√≠fica sobre referencias.
        Prioriza usar las fuentes de la respuesta anterior si est√°n disponibles.
        """
        
        # PASO 1: Intentar usar fuentes de la respuesta anterior
        cached_sources = source_cache.get_sources(user_id)
        
        if cached_sources:
            print(f"üìã [REFERENCIAS] ‚úÖ CACHE ENCONTRADO para usuario {user_id[:8]}...")
            print(f"üìã [REFERENCIAS] Consulta original en cache: '{cached_sources['original_query']}'")
            print(f"üìã [REFERENCIAS] Documentos en cache: {cached_sources['sources']}")
            print(f"üìã [REFERENCIAS] Timestamp cache: {cached_sources['timestamp']}")
            
            # Buscar referencias en los documentos espec√≠ficos de la respuesta anterior
            all_reference_chunks = []
            
            for source_file, reference_query in cached_sources["processed_sources"].items():
                print(f"üîç [REFERENCIAS] Buscando referencias en {source_file} con query: {reference_query}")
                
                # Buscar espec√≠ficamente en este documento de referencias
                try:
                    context, chunks = await get_rag_context_with_sources(
                        reference_query,
                        search_id=f"references_{source_file.replace('.pdf', '').replace('_ref', '')}"
                    )
                    
                    # Filtrar chunks que pertenecen al documento espec√≠fico de referencias
                    source_chunks = [
                        chunk for chunk in chunks 
                        if chunk.get("source", "").lower() == source_file.lower()
                    ]
                    
                    all_reference_chunks.extend(source_chunks)
                    print(f"üìö [REFERENCIAS] Encontrados {len(source_chunks)} chunks de referencia en {source_file}")
                    
                    if source_chunks:
                        print(f"‚úÖ [REFERENCIAS] Primeros chunks encontrados: {[chunk.get('source') for chunk in source_chunks[:3]]}")
                    
                except Exception as e:
                    print(f"‚ùå Error buscando referencias en {source_file}: {e}")
            
            if all_reference_chunks:
                print(f"‚úÖ [REFERENCIAS] Total chunks de referencia encontrados: {len(all_reference_chunks)}")
                response = ReferenceDetector.format_references_response(all_reference_chunks)
                
                # Agregar contexto sobre de d√≥nde vienen las referencias
                original_query = cached_sources.get("original_query", "la consulta anterior")
                context_note = f"\n\nüîó **Contexto**: Estas referencias corresponden a tu consulta anterior sobre: *\"{original_query}\"*"
                
                return response + context_note
            else:
                print("‚ö†Ô∏è [REFERENCIAS] No se encontraron chunks de referencia en documentos espec√≠ficos")
        else:
            print(f"‚ùå [REFERENCIAS] NO hay cache disponible para usuario {user_id[:8]}...")
            cache_stats = source_cache.get_cache_stats()
            print(f"‚ùå [REFERENCIAS] Stats cache global: {cache_stats}")
        
        # PASO 2: Fallback - b√∫squeda gen√©rica por tema (comportamiento anterior)
        print("üîÑ [REFERENCIAS] Usando b√∫squeda gen√©rica por tema")
        
        # Extraer el tema espec√≠fico de la consulta
        topic_keywords = {
            "sue√±o": "sue√±o infantil desarrollo nocturno",
            "lactancia": "lactancia materna pecho destete",
            "alimentaci√≥n": "alimentaci√≥n complementaria BLW",
            "comida": "alimentaci√≥n complementaria BLW",
            "desarrollo": "desarrollo motor cognitivo emocional",
            "rutinas": "rutinas horarios estructura d√≠a",
            "llanto": "llanto autorregulaci√≥n emociones",
            "apego": "apego v√≠nculo relaci√≥n maternal",
            "disciplina": "disciplina positiva l√≠mites",
            "emociones": "desarrollo emocional autorregulaci√≥n"
        }
        
        message_lower = message.lower()
        specific_topic = None
        
        for topic, keywords in topic_keywords.items():
            if topic in message_lower:
                specific_topic = keywords
                break
        
        # Si no hay tema espec√≠fico, usar consulta general
        search_query = specific_topic if specific_topic else "referencias bibliogr√°ficas fuentes autores investigaciones"
        
        # Obtener chunks de referencias
        reference_chunks = await ReferenceDetector.get_reference_chunks(search_query)
        
        # Formatear y devolver respuesta
        return ReferenceDetector.format_references_response(reference_chunks)